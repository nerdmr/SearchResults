// custom scripts for luther.edu

$(document).ready(function() {

	// GENERAL
	//////////////////////////////////////////////////

	// Add js class
	$('body').addClass('js');

	// Remove &nbsp; tags generated by the WYSIWYG. They get thrown in all over the place, and can really mess up styling.
	$('.fullPost p, .pageContent p, .blurb p, .announcement p').each(function() {
		var $this = $(this);
		$this.html($this.html().replace(/&nbsp;/g, ''));
	});

	// Give the first tab and tab item an active class
	$('#tabs .fragment-1').addClass('active');
	$('#tabs #fragment-1').addClass('active');


	// HEADER
	//////////////////////////////////////////////////

	// adds class 'scrolling' to global header and global nav on scroll. removes when back to top.

	$(window).scroll(function() {

		if ($(this).scrollTop() > 140){
			$('#global-banner, #global-nav').addClass("scrolling");
		}
		else{
			$('#global-banner, #global-nav').removeClass("scrolling");
		}
	});

	// NAVIGATION
	//////////////////////////////////////////////////

	// MOBILE SEARCH
	// Open / close global search on mobile
	$('#nav-toggles a.search-toggle').click(function( event ) { // click the search icon
		$(this).toggleClass('open');
		$('#search-nav').toggleClass('open');
		event.preventDefault();
		document.getElementById("gsc-i-id1").focus();
	});

	// AUDIENCE MENU
	// Open / close audience menu on desktop
	// $('#nav-toggles a.audience-toggle').click(function( event ) { // click the info for icon
	// 	$(this).toggleClass('open');
	// 	$('#audience-nav').toggleClass('open');
	// 	event.preventDefault();
	// });
	// $('#nav-toggles a.audience-toggle').click(function( event ) { // click the info for icon
	// 	$(this).toggleClass('open');
	// 	$('#audience-nav').toggleClass('open');
	// 	event.preventDefault();
	// });

	// MINISITE NAVIGATION
	// Open / close minisite navigation on mobile
	$('#navWrap a.toggle').click(function( event ) {  // click the hamburger
		$(this).toggleClass('open'); // Adds open class to button as a css hook
		$('#navWrap #minisiteNavigation').slideToggle('400'); // slides open nav
		$('#navWrap .subNavElements').slideToggle('400'); // slides open sub nav
		event.preventDefault();

	});

	// MINISITE OVERLAY NAVIGATION
	//open/close primary navigation
	$('.overlay-trigger').on('click', function(){
		
		//in firefox transitions break when parent overflow is changed, so we need to wait for the end of the trasition to give the body an overflow hidden
		if( $('.overlay-nav').hasClass('is-visible') ) {
			$('.overlay-nav').removeClass('is-visible').one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend',function(){
				$('body').removeClass('overflow-hidden');
			});
		} else {
			$('.overlay-nav').addClass('is-visible').one('webkitTransitionEnd otransitionend oTransitionEnd msTransitionEnd transitionend',function(){
				$('body').addClass('overflow-hidden');
			});
		}
	});

      // var navHoverConfig = {
      //   sensitivity: 5, // number = sensitivity threshold (must be 1 or higher)
      //   interval: 100, // number = milliseconds for onMouseOver polling interval
      //   // over: openSubnav, // function = onMouseOver callback (REQUIRED)
      //   timeout: 500, // number = milliseconds delay before onMouseOut
      //   // out: function(){} // function = onMouseOut callback (REQUIRED)
      // };
	// MEGA MENU
	// Open / close mega menu on hover for desktop
	$('#global-nav .minisite').hoverIntent(function( event ) { // click the info for icon
		$(this).toggleClass('open');
		event.preventDefault();
	});

	// Animate show/hide of children pages
    $('li.navListItem.accordion > a').click(function( event ) { // click the menu item

		var item = $(this).parent();

		// open/closed classes for no-js
		if(item.hasClass('closed')) {
			item.removeClass('closed');
			item.addClass('open');
		} else {
			item.removeClass('open');
			item.addClass('closed');
		}

		// slide open
		item.children('ul').slideToggle('400');

		event.preventDefault();
    });

    // We need to set navLists on open accorions to display:block so that they toggle correctly
    $('li.navListItem.accordion.open ul.navList').css('display', 'block');

    // 

	// SEARCH
	//////////////////////////////////////////////////

	// adds a placeholder attribute to the Google search widget
	$('.search-wrap input.gsc-input').attr('placeholder', 'Search Luther');

    // TABLES
	//////////////////////////////////////////////////

	// give WYSIWYG and tablesorter tables wrapper classes for overflow:scroll
	$('#pageContent table').wrap('<div class="tableWrap"></div>');
	$('table.tablesorter').wrap('<div class="tableSorterWrap"></div>');

	// IFRAMES
	//////////////////////////////////////////////////

	$('iframe').wrap('<div class="iframeWrap"></div>');

    // CALL TO ACTION
	//////////////////////////////////////////////////

    // Add analytics tracking to call to action buttons
	$('p, li').on('click', "a[class^=cta-]", function(e) {
    	if ((label = $(this).attr("class").match(/^cta\-([A-Za-z0-9_\-]+)/)[1]) != "button") {
    		ga('send', 'event', 'call-to-action', 'click', $(location).attr('pathname') + 'button_' + label);
    	}
    	setTimeout(function() {
    		window.location.href = e.target.href;
    	}, 1000);
    	e.preventDefault();
	});

    // LUTHER IS
	//////////////////////////////////////////////////

    // Add analytics tracking to luther is module on homepage
	$('.tnImage, .tnDesc').on('click', "a[rel^=lutheris-]", function(e) {
		label = $(this).closest(".imageChunk").attr("class").match(/^imageChunk\s([A-Za-z0-9_\-]+)/)[1];
		console.log($(location).attr('pathname') + 'lutheris_' + label);
		ga('send', 'event', 'lutheris', 'click', $(location).attr('pathname') + 'lutheris_' + label);
	});

	// EQUAL HEIGHT CONTAINERS (until we upgrade Foundation and use Equalizer)
	//////////////////////////////////////////////////

	// http://codepen.io/micahgodbolt/pen/FgqLc
	// http://css-tricks.com/equal-height-blocks-in-rows/
	// It's been modified into a function called at page load and then each time the page is resized.
	// One large modification was to remove the set height before each new calculation.

	equalheight = function(container){

	var currentTallest = 0,
	     currentRowStart = 0,
	     rowDivs = new Array(),
	     $el,
	     topPosition = 0;
	 $(container).each(function() {

	   $el = $(this);
	   $($el).height('auto')
	   topPostion = $el.position().top;

	   if (currentRowStart != topPostion) {
	     for (currentDiv = 0 ; currentDiv < rowDivs.length ; currentDiv++) {
	       rowDivs[currentDiv].height(currentTallest);
	     }
	     rowDivs.length = 0; // empty the array
	     currentRowStart = topPostion;
	     currentTallest = $el.height();
	     rowDivs.push($el);
	   } else {
	     rowDivs.push($el);
	     currentTallest = (currentTallest < $el.height()) ? ($el.height()) : (currentTallest);
	  }
	   for (currentDiv = 0 ; currentDiv < rowDivs.length ; currentDiv++) {
	     rowDivs[currentDiv].height(currentTallest);
	   }
	 });
	}



});